#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>  // Library servo khusus untuk ESP32

// ====== KONFIGURASI WIFI ======
const char* ssid = "A23 milik Nabil";
const char* password = "bbbbbbbb";

// ====== KONFIGURASI MQTT ======
const char* mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char* topic_sub = "esp32/motor";

WiFiClient espClient;
PubSubClient client(espClient);

// ====== PIN MOTOR (L298N) ======
int ENA = 32;
int IN1 = 25;
int IN2 = 26;

int ENB = 13;
int IN3 = 27;
int IN4 = 14;

// ====== PIN SERVO DAN BUZZER ======
int servoPin = 4;
int buzzerPin = 12;
Servo myServo;

// ====== FUNGSI GERAK ======
void maju(int speedVal) {
  Serial.println("üöó Maju");
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, speedVal);
  analogWrite(ENB, speedVal);
}

void mundur(int speedVal) {
  Serial.println("‚¨ÖÔ∏è Mundur");
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENA, speedVal);
  analogWrite(ENB, speedVal);
}

void berhenti() {
  Serial.println("üõë Stop");
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}

// ====== FUNGSI SERVO ======
void servoKiri() {
  Serial.println("‚Ü©Ô∏è Servo Kiri");
  myServo.write(30);
}

void servoKanan() {
  Serial.println("‚Ü™Ô∏è Servo Kanan");
  myServo.write(150);
}

void servoTengah() {
  Serial.println("‚è∫Ô∏è Servo Tengah");
  myServo.write(90);
}

// ====== FUNGSI BUZZER ======
void buzzerOn() {
  Serial.println("üîä Buzzer ON");
  digitalWrite(buzzerPin, HIGH);
}

void buzzerOff() {
  Serial.println("üîá Buzzer OFF");
  digitalWrite(buzzerPin, LOW);
}

// ====== SETUP WIFI ======
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Menghubungkan ke WiFi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Terhubung ke WiFi!");
  Serial.print("IP ESP32: ");
  Serial.println(WiFi.localIP());
}

// ====== CALLBACK MQTT ======
void callback(char* topic, byte* message, unsigned int length) {
  String msg = "";
  for (int i = 0; i < length; i++) msg += (char)message[i];
  msg.trim();
  Serial.println("Pesan diterima: " + msg);

  if (msg == "maju") maju(255);
  else if (msg == "mundur") mundur(255);
  else if (msg == "stop") berhenti();
  else if (msg == "kiri") servoKiri();
  else if (msg == "kanan") servoKanan();
  else if (msg == "tengah") servoTengah();
  else if (msg == "buzzer_on") buzzerOn();
  else if (msg == "buzzer_off") buzzerOff();
}

// ====== RECONNECT MQTT ======
void reconnect() {
  while (!client.connected()) {
    Serial.print("Menghubungkan ke MQTT...");
    if (client.connect("ESP32MotorClient")) {
      client.subscribe(topic_sub);
      Serial.println("‚úÖ Terhubung ke MQTT!");
    } else {
      Serial.print("Gagal, rc=");
      Serial.print(client.state());
      Serial.println(" coba lagi dalam 2 detik");
      delay(2000);
    }
  }
}

// ====== SETUP ======
void setup() {
  Serial.begin(115200);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  myServo.attach(servoPin);
  myServo.write(90); // posisi awal tengah

  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

// ====== LOOP ======
void loop() {
  if (!client.connected()) reconnect();
  client.loop();
}
